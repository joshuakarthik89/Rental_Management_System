"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from decouple import config

# Import production security settings
from .security_settings import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-&zt-tj-)*zxk!7a*656xk^o#%_cjc*(qc)uind7)egzaudmlb&')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# ALLOWED_HOSTS configuration - always include Railway URL
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')
# Always ensure Railway URL is included
if 'rentalmanagementsystem-production.up.railway.app' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('rentalmanagementsystem-production.up.railway.app')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_celery_beat',
    'django_celery_results',
    'django_filters',
    
    # Production enhancements
    'csp',  # Content Security Policy
    'django_ratelimit',  # Rate limiting
    'health_check',  # Health checks
    'drf_spectacular',  # API documentation
    'debug_toolbar',  # Debug toolbar (for development)
    'django_extensions',
    
    # Local apps
    'apps.accounts',
    'apps.catalog',
    'apps.pricing',
    'apps.orders',
    'apps.deliveries',
    'apps.invoicing',
    'apps.payments',
    'apps.notifications',
    'apps.reports',
    'apps.api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware',  # Content Security Policy
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # Debug toolbar (dev only)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django_ratelimit.middleware.RatelimitMiddleware',  # Rate limiting
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Railway deployment configuration
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=True  # Required for Railway PostgreSQL
    )
}

# Fallback to SQLite for local development if DATABASE_URL is not set
if not os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Using Django's built-in User model with UserProfile extension
# AUTH_USER_MODEL = 'auth.User'  # Using default Django User model

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'login': '5/minute',
        'password_reset': '3/hour',
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=config('JWT_ACCESS_TOKEN_LIFETIME_MINUTES', default=60, cast=int)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=config('JWT_REFRESH_TOKEN_LIFETIME_DAYS', default=7, cast=int)),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# CORS configuration for frontend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Next.js default development server
    "http://127.0.0.1:3000",
    "https://rentalmanagementsystem-production.up.railway.app",  # Railway production URL
    "https://wholesome-endurance-production.up.railway.app",  # Frontend Railway URL
]

# CSRF trusted origins for Railway deployment
CSRF_TRUSTED_ORIGINS = [
    "https://rentalmanagementsystem-production.up.railway.app",
    "https://wholesome-endurance-production.up.railway.app",
]

CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for development
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=True, cast=bool)

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Celery Configuration
CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Cache configuration (Redis)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': config('REDIS_URL', default='redis://localhost:6379/1'),
    }
}

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=False, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='venkatesh.k21062005@gmail.com')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='ywqc fghh kgdv kaqe')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='Rental Management System <venkatesh.k21062005@gmail.com>')
DEFAULT_REPLY_TO_EMAIL = config('DEFAULT_REPLY_TO_EMAIL', default='venkatesh.k21062005@gmail.com')

# Company information for emails
COMPANY_NAME = config('COMPANY_NAME', default='Rental Management System')
COMPANY_PHONE = config('COMPANY_PHONE', default='+91-9025447567')
COMPANY_ADDRESS = config('COMPANY_ADDRESS', default='Gujarat, India')
WEBSITE_URL = config('WEBSITE_URL', default='https://rentalmanagement.com')

# Email validation and fallback
if not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD:
    import logging
    logging.warning('Email credentials not configured. Email notifications may not work.')
    # Fallback to console backend for development
    if DEBUG:
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB

# =================== PRODUCTION ENHANCEMENTS ===================

# Redis Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 50,
                'retry_on_timeout': True,
            },
            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
        },
        'KEY_PREFIX': 'rental_mgmt',
        'TIMEOUT': 300,  # 5 minutes default
    }
}

# Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "https://wholesome-endurance-production.up.railway.app")
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_FONT_SRC = ("'self'",)

# DRF Spectacular (API Documentation)
SPECTACULAR_SETTINGS = {
    'TITLE': 'Rental Management System API',
    'DESCRIPTION': 'Industry-grade rental management system with comprehensive features',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/',
}

# Debug Toolbar (Development only)
if DEBUG:
    INTERNAL_IPS = [
        '127.0.0.1',
        'localhost',
    ]

# Health Check Configuration
HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN': 100,    # in MB
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} [{name}:{lineno}] {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{asctime}] {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/django.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'] if not DEBUG else ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps': {
            'handlers': ['console', 'file'] if not DEBUG else ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console'],
    },
}

# Create logs directory if it doesn't exist
import os
log_dir = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# Industry-Grade Payment Gateway Configuration
PAYMENT_GATEWAYS = {
    'STRIPE': {
        'ENABLED': True,
        'PUBLISHABLE_KEY': os.environ.get('STRIPE_PUBLISHABLE_KEY', ''),
        'SECRET_KEY': os.environ.get('STRIPE_SECRET_KEY', ''),
        'WEBHOOK_SECRET': os.environ.get('STRIPE_WEBHOOK_SECRET', ''),
        'API_VERSION': '2023-10-16',
        'CURRENCY': 'USD',
        'CAPTURE_METHOD': 'automatic',
        'CONFIRMATION_METHOD': 'automatic',
        'PAYMENT_METHODS': ['card', 'klarna', 'afterpay_clearpay', 'affirm'],
        'SUPPORTED_CURRENCIES': ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY'],
    },
    'RAZORPAY': {
        'ENABLED': False,  # Can be enabled when needed
        'KEY_ID': os.environ.get('RAZORPAY_KEY_ID', ''),
        'KEY_SECRET': os.environ.get('RAZORPAY_KEY_SECRET', ''),
        'WEBHOOK_SECRET': os.environ.get('RAZORPAY_WEBHOOK_SECRET', ''),
        'CURRENCY': 'INR',
        'SUPPORTED_CURRENCIES': ['INR'],
    }
}

# Stripe Configuration (Legacy - for backward compatibility)
STRIPE_PUBLISHABLE_KEY = PAYMENT_GATEWAYS['STRIPE']['PUBLISHABLE_KEY']
STRIPE_SECRET_KEY = PAYMENT_GATEWAYS['STRIPE']['SECRET_KEY']
STRIPE_WEBHOOK_SECRET = PAYMENT_GATEWAYS['STRIPE']['WEBHOOK_SECRET']

# Payment Processing Configuration
PAYMENT_CONFIG = {
    'DEFAULT_CURRENCY': 'USD',
    'ENABLE_REFUNDS': True,
    'AUTO_CAPTURE': True,
    'PAYMENT_TIMEOUT': 3600,  # 1 hour in seconds
    'MAX_PAYMENT_AMOUNT': 999999.99,
    'MIN_PAYMENT_AMOUNT': 0.50,
    'ENABLE_PAYMENT_ANALYTICS': True,
    'WEBHOOK_RETRY_ATTEMPTS': 3,
    'WEBHOOK_TIMEOUT': 30,  # seconds
    'ENABLE_FRAUD_DETECTION': True,
    'PAYMENT_LINK_EXPIRY_HOURS': 24,
}

# Email Configuration for Payment Notifications
EMAIL_TEMPLATES = {
    'PAYMENT_SUCCESS': 'payments/payment_success.html',
    'PAYMENT_FAILED': 'payments/payment_failed.html',
    'REFUND_PROCESSED': 'payments/refund_confirmation.html',
    'DISPUTE_NOTIFICATION': 'payments/dispute_notification.html',
}

# Admin Email for Critical Payment Notifications
ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL', 'admin@example.com')

# Security Configuration for Payment Processing
PAYMENT_SECURITY = {
    'ENABLE_IP_WHITELIST': False,
    'ALLOWED_IPS': [],
    'ENABLE_RATE_LIMITING': True,
    'RATE_LIMIT_PER_MINUTE': 60,
    'ENABLE_CSRF_PROTECTION': True,
    'REQUIRE_HTTPS': not DEBUG,
    'SESSION_COOKIE_SECURE': not DEBUG,
    'CSRF_COOKIE_SECURE': not DEBUG,
}
